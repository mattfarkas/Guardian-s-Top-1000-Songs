setwd("~/Desktop/School_Work/Learning/personal_projects/guard_top_1000_songs/data")
top_songs = read.csv("top_songs_more_info.csv")
art.gen = read.csv("artists_and_genres.csv")
head(top_songs)
head(art.gen)
total.data = merge(top_songs, art.gen, all.x = T, by.x = "ARTIST", by.y = "artist")
head(total.data)
sum(is.na(total.data$master_genre))
total.data[is.na(total.data$master_genre),'master_genre'] = 'unidentified'
sum(is.na(total.data$master_genre))
str(total.data)
total.data[is.na(total.data$master_genre),'master_genre'] = 'Alternative rock'
sum(is.na(total.data$master_genre))
top_songs = read.csv("top_songs_more_info.csv")
art.gen = read.csv("artists_and_genres.csv")
total.data = merge(top_songs, art.gen, all.x = T, by.x = "ARTIST", by.y = "artist")
total.data$master_genre = as.character(total.data$master_genre)
total.data[is.na(total.data$master_genre),'master_genre'] = 'Alternative rock'
total.data$master_genre = as.factor(total.data$master_genre)
str(toal)
str(total.data)
### Import data
top_songs = read.csv("top_songs_more_info.csv")
art.gen = read.csv("artists_and_genres.csv")
total.data = merge(top_songs, art.gen, all.x = T, by.x = "ARTIST", by.y = "artist")
### Define missing genres as 'unidentified'
total.data$master_genre = as.character(total.data$master_genre)
total.data[is.na(total.data$master_genre),'master_genre'] = 'unidentified'
total.data$master_genre = as.factor(total.data$master_genre)
str(total.data)
### Import data
top_songs = read.csv("top_songs_more_info.csv", na.strings=c("","NA"))
art.gen = read.csv("artists_and_genres.csv", na.strings=c("","NA"))
total.data = merge(top_songs, art.gen, all.x = T, by.x = "ARTIST", by.y = "artist")
### Define missing genres as 'unidentified'
total.data$master_genre = as.character(total.data$master_genre)
total.data[is.na(total.data$master_genre),'master_genre'] = 'unidentified'
total.data$master_genre = as.factor(total.data$master_genre)
str(total.data)
model.simple = lm(data = total.data,
song_pop ~ master_genre + Rank + YEAR + danceability)
summary(model.simple)
plot(model.simple)
model.simple = lm(data = total.data,
song_pop ~ master_genre + Rank + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + intrumentalness + energy + acousticness +
duration_ms)
model.simple = lm(data = total.data,
song_pop ~ master_genre + Rank + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple)
model.simple = lm(data = total.data,
RANK ~ master_genre + Rank + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
model.simple = lm(data = total.data,
Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple)
model.simple.spot.pop = lm(data = total.data,
Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple)
model.simple.rank = lm(data = total.data,
Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.rank)
model.simple.spot.pop = lm(data = total.data,
Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.spot.pop)
model.simple.spot.pop = lm(data = total.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.spot.pop)
stepped.song.pop = step(model.simple.spot.pop, direction = 'both')
model.simple.spot.pop = lm(data = total.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.spot.pop)
stepped.song.pop = step(model.simple.spot.pop, direction = 'both')
model.simple.spot.pop = lm(data = total.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms,
na.action = "omit")
?na.action
model.simple.spot.pop = lm(data = total.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms,
na.action = na.omit())
model.simple.spot.pop = lm(data = total.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
is.na(total.data)
total.data[28,]
total.data[is.na(total.data),]
total.data[!is.na(total.data),]
complete.data = total.data[complete.cases(total.data),]
head(total.data)
total.data$SPOTIFY_URL = NULL
total.data$THEME = NULL
total.data$SPOTIFY_URL = NULL
complete.data = total.data[complete.cases(total.data),]
model.simple.rank = lm(data = total.data,
Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.rank)
model.simple.spot.pop = lm(data = total.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.spot.pop)
stepped.song.pop = step(model.simple.spot.pop, direction = 'both')
model.simple.rank = lm(data = complete.data,
Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.rank)
model.simple.spot.pop = lm(data = complete.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + tempo + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.spot.pop)
stepped.song.pop = step(model.simple.spot.pop, direction = 'both')
summary(stepped.song.pop)
summary(model.simple.spot.pop)
complete.data$danceability = scale(complete.data$danceability)
complete.data$danceability
complete.data = total.data[complete.cases(total.data),]
complete.data$danceability = (complete.data$danceability - mean(complete.data$danceability) /
sd(complete.data$danceability)
complete.data$danceability = (complete.data$danceability - mean(complete.data$danceability)) /
sd(complete.data$danceability)
complete.data$danceability = (complete.data$danceability - mean(complete.data$danceability)) /
sd(complete.data$danceability)
complete.data$danceability = (complete.data$danceability - mean(complete.data$danceability)) /
sd(complete.data$danceability)
complete.data$danceability = (complete.data$danceability - mean(complete.data$danceability)) /
sd(complete.data$danceability)
complete.data[,c('danceability', 'valence', 'tempo', 'loudness',
'liveness', 'tempo', 'instrumentalness', 'energy', 'acousticness',
'duration_ms')] = scale(complete.data[,c('danceability', 'valence', 'tempo', 'loudness',
'liveness', 'tempo', 'instrumentalness', 'energy', 'acousticness',
'duration_ms')])
complete.data[,c('danceability', 'valence', 'tempo', 'loudness','liveness', 'tempo', 'instrumentalness',
'energy', 'acousticness', 'duration_ms')] = scale(complete.data[,c('danceability',
'valence', 'tempo', 'loudness', 'liveness', 'tempo',
'instrumentalness', 'energy', 'acousticness',
'duration_ms')])
complete.data[,c('danceability', 'valence', 'loudness','liveness', 'tempo', 'instrumentalness',
'energy', 'acousticness', 'duration_ms')] = scale(complete.data[,c('danceability',
'valence', 'tempo', 'loudness', 'liveness',
'instrumentalness', 'energy', 'acousticness',
'duration_ms')])
complete.data = total.data[complete.cases(total.data),]
complete.data[,c('danceability', 'valence', 'loudness','liveness', 'tempo', 'instrumentalness',
'energy', 'acousticness', 'duration_ms')] = scale(complete.data[,c('danceability',
'valence', 'tempo', 'loudness', 'liveness',
'instrumentalness', 'energy', 'acousticness',
'duration_ms')])
model.simple.rank = lm(data = complete.data,
Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.rank)
model.simple.spot.pop = lm(data = complete.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.spot.pop)
stepped.song.pop = step(model.simple.spot.pop, direction = 'both')
summary(stepped.song.pop)
plot(x = complete.data$instrumentalness, complete.data$song_pop)
plot(sort(complete.data$instrumentalness))
plot(sort(total.data$instrumentalness))
plot(sort(total.data[total.data$instrumentalness>.1, 'instrumentalness'))
plot(sort(total.data[total.data$instrumentalness>.1, 'instrumentalness']))
plot(total.data[total.data$instrumentalness>.1, c('instrumentalness', "song_pop")])
model.simple.rank = lm(data = complete.data,
1/Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
model.simple.rank = lm(data = complete.data,
1/Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
model.simple.rank = lm(data = complete.data,
1/Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.rank)
stepped.rank = step(model.simple.rank, direction = 'both')
summary(stepped.rank)
summary(model.simple.spot.pop)
summary(stepped.song.pop)
summary(stepped.rank)
unique(complete.data$master_genre)
complete.data[complete.data$master_genre=='Electronic music','instrumentalness']
total.data[total.data$master_genre=='Electronic music','instrumentalness']
total.data[total.data$master_genre=='Electronic music',c("ARTIST", "TITLE", 'instrumentalness')]
model.simple.rank = lm(data = complete.data,
1/Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.rank)
total.data[total.data$instrumentalness<.2,c("ARTIST", "TITLE", 'instrumentalness')]
model.simple.rank = lm(data = complete.data,
1/Rank ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.rank)
model.simple.spot.pop = lm(data = complete.data,
song_pop ~ master_genre + YEAR + danceability + valence + tempo + loudness +
liveness + converted_keys + instrumentalness + energy + acousticness +
duration_ms)
summary(model.simple.spot.pop)
stepped.song.pop = step(model.simple.spot.pop, direction = 'both')
summary(stepped.song.pop)
nrow(complete.data$master_genre=='Heavy metal',)
nrow(complete.data[complete.data$master_genre=='Heavy metal',])
complete.data[complete.data$master_genre=='Heavy metal',]
complete.data[complete.data$master_genre=='Heavy metal','song_pop']
aggregate(complete.data[,'song_pop'], complete.data$master_genre, mean)
aggregate(complete.data[,'song_pop'], list(complete.data$master_genre), mean)
sort(aggregate(complete.data[,'song_pop'], list(complete.data$master_genre), mean))
sort(aggregate(complete.data[,'song_pop'], list(complete.data$master_genre), mean), 'x')
sort(aggregate(complete.data[,'song_pop'], list(complete.data$master_genre), mean), 'mean')
sort(aggregate(complete.data[,'song_pop'], list(complete.data$master_genre), mean), 'partial')
means = aggregate(complete.data[,'song_pop'], list(complete.data$master_genre), mean)
means
sort(means)
sort(means, means$x)
sort(means, decreasing = F)
sort(means[order(means$x),])
sort(means[order(means$x),'x'])
sort(means[order(means$x),1:2])
sort(means[order(means$x),c(1:2)])
sort(means[order(means$x),c(1,2)])
sort(means[order(means$x),c('Group.1','x')])
sort(means[order(means$x),c('Group.1','x ')])
sort(means[order(means$x),'x'])
sort(means[order(means$x),])
means[order(means$x),]
means[-order(means$x),]
means[order(means$x, decreasing = T),]
barplot(means[order(means$x, decreasing = T),])
